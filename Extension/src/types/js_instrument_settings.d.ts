/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The JS object to be instrumented.
 */
export type JSObject = string;
/**
 * The name recorded by the instrumentation for this object.
 */
export type InstrumentedName = string;
/**
 * An array of properties to instrument on this object. If array is empty, then all properties are instrumented.
 */
export type PropertiesToInstrument =
  | (
      | {
          depth?: number;
          propertyNames?: string[];
          [k: string]: unknown;
        }
      | string
    )[]
  | null;
/**
 * An array of non-existing properties to instrument on this object.
 */
export type NonExistingPropertiesToInstrument = string[];
/**
 * Properties excluded from instrumentation.
 */
export type ExcludedProperties = string[];
/**
 * Set to true save the call stack info with each property call.
 */
export type LogCallStack = boolean;
/**
 * Set to true to save args that are functions as strings during argument serialization. If false `FUNCTION` is recorded.
 */
export type LogFunctionsAsStrings = boolean;
/**
 * Set true to log get requests to properties that are functions. If true when a call is made, the log will contain both the call and a get log.
 */
export type LogFunctionGets = boolean;
/**
 * Set to true to prevent nested objects and functions from being overwritten (and thus having their instrumentation removed). Other properties (static values) can still be set with this is enabled.
 */
export type PreventSets = boolean;
/**
 * Set to `true` to recursively instrument all object properties of the given `object`. NOTE: (1) `propertiesToInstrument` does not propagate to sub-objects. (2) Sub-objects of prototypes can not be instrumented recursively as these properties can not be accessed until an instance of the prototype is created.
 */
export type Recursive = boolean;
/**
 * Recursion limit when instrumenting object recursively
 */
export type RecursionDepth = number;
/**
 * TODO
 */
export type TODO =
  | {
      /**
       * The property that will pe overwritten
       */
      key?: string;
      /**
       * The value that should be returned
       */
      value:
        | string
        | unknown[]
        | {
            [k: string]: unknown;
          }
        | boolean
        | number
        | number;
      /**
       * TODO
       */
      level: number;
      [k: string]: unknown;
    }[]
  | null;
/**
 * Schema describing the JSON to be passed to JS Instrument Settings.
 */
export type JSInstrumentSettings = SettingsObjects[];

export interface SettingsObjects {
  object: JSObject;
  instrumentedName: InstrumentedName;
  depth?: number;
  logSettings: LogSettings;
}
/**
 * The log settings object.
 */
export interface LogSettings {
  propertiesToInstrument: PropertiesToInstrument;
  nonExistingPropertiesToInstrument: NonExistingPropertiesToInstrument;
  excludedProperties: ExcludedProperties;
  logCallStack: LogCallStack;
  logFunctionsAsStrings: LogFunctionsAsStrings;
  logFunctionGets: LogFunctionGets;
  preventSets: PreventSets;
  recursive: Recursive;
  depth: RecursionDepth;
  overwrittenProperties?: TODO;
}
