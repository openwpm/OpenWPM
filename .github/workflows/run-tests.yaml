# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: On-push-pipeline

on:
  [push]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    env:
      MINICONDA_PATH: ${{ env.HOME }}/miniconda
      OPENWPM_CONDA_PATH: ${{ env.MINICONDA_PATH }}/envs/openwpm
    steps:
    # All of these steps are just setup
    - uses: actions/checkout@v2
    # If the environment.yaml hasn't changed we just reuse the entire conda install
    - id: cache
      uses: actions/cache@v2
      env:
        cache-name: conda-cache
      with:
        path: ${{ env.MINICONDA_PATH }}
        key: ${{ env.cache-name }}-${{ hashFiles('environment.yaml') }}

    - name: Install conda
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: $GITHUB_WORKSPACE/scripts/install-miniconda.sh

    - run: echo "$MINICONDA_PATH/bin" >> $GITHUB_PATH

    - name: Install.sh (cache miss)
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        $GITHUB_WORKSPACE/install.sh
    - name: Install.sh (cache hit)
      if: ${{ steps.cache.outputs.cache-hit == 'true' }}
      run: |
        conda info --envs
    - run: echo "$OPENWPM_CONDA_PATH/bin" >> $GITHUB_PATH
    # Now we have a working OpenWPM environment
    - uses: pre-commit/action@v2.0.0


